{
  "entityType" : "WIDGETS_BUNDLE",
  "entity" : {
    "alias" : "apana",
    "description" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGETS_BUNDLE",
      "id" : "0c0cc280-f160-11ec-ae1a-8d7f24961881"
    },
    "image" : null,
    "name" : "Apana",
    "title" : "Apana"
  },
  "widgets" : [ {
    "alias" : "thresholds_widget_",
    "name" : "Thresholds widget ",
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 9,
      "sizeY" : 10.5,
      "resources" : [ ],
      "templateHtml" : "<div style=\"width: 100%; height: 100%; padding: 10px\">\n    <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>Select treshhold</mat-label>\n                <mat-select [(ngModel)]=\"data\" (ngModelChange)=\"dataChanged($event)\">\n                \t<mat-option *ngFor=\"let treshhold of thresholds\" [value]=\"treshhold\">\n                \t\t{{treshhold}}\n                \t</mat-option>\n                </mat-select>\n    </mat-form-field>\n    <form *ngIf=\"addMonitorFormGroup\" [formGroup]=\"addMonitorFormGroup\" (ngSubmit)=\"save()\">\n        <div formGroupName=\"attributes\">\n            <!--default && simple-->\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Monitor Name</mat-label>\n                    <input matInput required formControlName=\"realName\">\n                </mat-form-field>\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Monitor Evaluaion Item</mat-label>\n                <mat-select formControlName=\"evalTelemetryKey\">\n                \t<mat-option *ngFor=\"let eval of evalTelemetryKey\" [value]=\"eval\">\n                \t\t{{eval}}\n                \t</mat-option>\n                </mat-select>\n                </mat-form-field>\n    </div>\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Threshold Comparison</mat-label>\n                <mat-select formControlName=\"thresholdComparison\">\n                \t<mat-option *ngFor=\"let compar of thresholdComparison\" [value]=\"compar\">\n                \t\t{{compar}}\n                \t</mat-option>\n                </mat-select>\n                </mat-form-field>\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Threshold Value</mat-label>\n                    <input type=\"number\" step=\"1\" matInput formControlName=\"thresholdValue\">\n                </mat-form-field>\n    </div>\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Alarm Enabled</mat-label>\n                    <mat-select formControlName=\"alarmEnabled\">\n                    \t<mat-option *ngFor=\"let alarm of alarmEnabled\" [value]=\"alarm\">\n                    \t\t{{alarm}}\n                    \t</mat-option>\n                    </mat-select>\n                </mat-form-field>\n    </div>\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>No Data Alarm</mat-label>\n                    <mat-select formControlName=\"noDataAlert\">\n                    \t<mat-option *ngFor=\"let alert of noDataAlert\" [value]=\"alert\">\n                    \t\t{{alert}}\n                    \t</mat-option>\n                    </mat-select>\n                </mat-form-field>\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>No Data Alert Period</mat-label>\n                    <input type=\"number\" step=\"1\" matInput formControlName=\"noDataAlertPeriod\">\n                </mat-form-field>\n            </div>\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Notification methods</mat-label>\n                    <mat-select formControlName=\"notificationMethods\">\n                    \t<mat-option *ngFor=\"let notification of notificationMethods\" [value]=\"notification\">\n                    \t\t{{notification}}\n                    \t</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <!--continious-->\n            <div *ngIf=\"isContinious\" fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Continuous Event Duration</mat-label>\n                    <input type=\"number\" step=\"1\" matInput formControlName=\"cdtEventTrig\">\n                </mat-form-field>\n                 <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Continuous Event End Duration</mat-label>\n                    <input type=\"number\" step=\"1\" matInput formControlName=\"cdtEndEventTrig\">\n                </mat-form-field>\n            </div>\n        </div>\n        <div mat-dialog-actions fxLayout=\"row\">\n            <span fxFlex></span>\n            <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"addMonitorFormGroup.invalid || !addMonitorFormGroup.dirty\">Create</button>\n        </div>\n    </form>\n</div>",
      "templateCss" : "#container {\n    overflow: auto;\n}\n\n.tbDatasource-container {\n    margin: 5px;\n    padding: 8px;\n}\n\n.tbDatasource-title {\n    font-size: 1.200rem;\n    font-weight: 500;\n    padding-bottom: 10px;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    box-shadow: 0 0 10px #ccc;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-size: 1.000rem;\n    color: #757575;\n}\n\n.tbDatasource-table td {\n    position: relative;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0px 18px;\n    box-sizing: border-box;\n}",
      "controllerScript" : "let $scope, attributeService, assetService, entityRelationService;\nlet arrayOfOptions = [];\n\nself.onInit = function() {\n    self.ctx.ngZone.run(function() {\n       init(); \n       self.ctx.detectChanges(true);\n    });\n};\n\nfunction init() {\n    $scope = self.ctx.$scope;\n    \n    if(self.ctx.stateController){\n        let controller = self.ctx.stateController;\n        params = controller.getStateParams();\n    }\n\n    attributeService = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('attributeService'));\n    assetService = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('assetService'));\n    entityRelationService = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('entityRelationService'));\n\n    $scope.dataKeyDetected = false;\n    $scope.arrayOfOptions = arrayOfOptions;\n    \n    $scope.thresholds = ['Simple Threshold', 'Continuous Threshold'];\n    $scope.evalTelemetryKey = ['Gallons Per Minute','Daily Cummulative Flow'];\n    $scope.thresholdComparison = ['Greater Than','Less Than'];\n    $scope.alarmEnabled = ['Enable', 'Disable'];\n    $scope.noDataAlert = ['Enable', 'Disable'];\n    $scope.notificationMethods = ['Email'];\n    $scope.isContinious = false;\n\n    $scope.addMonitorFormGroup = $scope.fb.group({\n        attributes: $scope.fb.group({\n            realName: [''],\n            evalTelemetryKey: [null],\n            cdtEventTrig: [null],  \n            cdtEndEventTrig: [null], \n            thresholdComparison: [null], \n            thresholdValue: [null], \n            alarmEnabled: [null], \n            noDataAlert: [null],\n            noDataAlertPeriod: [null], \n            notificationMethods: [null], \n        })\n    });\n    \n    $scope.dataChanged = function(event){\n        if(event === \"Continuous Threshold\"){\n            $scope.isContinious = true;\n        }\n        else {\n            $scope.isContinious = false;\n        }\n    }\n\n    $scope.save = function(){\n        let attributes = $scope.addMonitorFormGroup.get('attributes').value;\n\n        let stateNodeId = params.entityId.id;\n        if(stateNodeId){\n            assetService.getAsset(stateNodeId).subscribe({\n                next(response) {\n                    saveAsset(response.ownerId.id, stateNodeId);\n                }\n            });\n        } else console.log(\"state params is empty\")\n    }\n}\n\nfunction saveAsset(stateOwnerId, stateNodeId) {\n   const derivedAssetName = $scope.addMonitorFormGroup.get('attributes').value['realName'] + \" A\" + getRandomInt(10, 100001);\n\n    let asset = {\n        name: derivedAssetName,\n        type: \"monitor\",\n        label: \"\",\n        customerId: {\n            entityType: \"CUSTOMER\",\n            id: stateOwnerId,\n        },\n        ownerId: {\n            entityType: \"CUSTOMER\",\n            id: stateOwnerId,\n        },\n    };\n\n    assetService.saveAsset(asset).subscribe({\n        next(response) {\n            saveRelation(stateNodeId, response.id.id);\n            createAndSaveAttributes(response.id);\n        }\n    });\n}\n\nfunction saveRelation(fromId, toId) {\n    let relation = {\n        additionalInfo: \"Autogenerated relation\",\n        from: {\n            entityType: \"ASSET\",\n            id: fromId,\n        },\n        to: {\n            entityType: \"ASSET\",\n            id: toId,\n        },\n        type: \"MonitoredBy\",\n        typeGroup: \"COMMON\"\n    };\n\n    entityRelationService.saveRelation(relation).subscribe();\n}\n\nfunction createAndSaveAttributes(entityId) {\n    let typeArray = [];\n    typeArray.push({key: \"source\", value: \"real\"});\n    saveEntityAttributes(entityId, typeArray);\n\n    let attributes = $scope.addMonitorFormGroup.get('attributes').value;\n    let attributesArray = [];\n    for (let key in attributes) {\n        attributesArray.push({key: key, value: attributes[key]});\n    }\n    \n    if(!$scope.isContinious){\n        attributesArray.push({key: 'triggerMethod', value: 'simpleThreshold'});\n        attributesArray = attributesArray.filter(function( obj ) {\n          return obj.key !== 'cdtEndEventTrig';\n        });\n        attributesArray = attributesArray.filter(function( obj ) {\n          return obj.key !== 'cdtEventTrig';\n        });\n    }\n    else if($scope.isContinious){\n        attributesArray.push({key: 'triggerMethod', value: 'continuousDurationThreshold'});\n    }\n    \n    if (attributesArray.length > 0) {\n        saveEntityAttributes(entityId, attributesArray);\n    } else {\n        self.ctx.rxjs.of([]);\n    }\n}\n\nfunction saveEntityAttributes(entityId, attributesArray) {\n    attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray).subscribe(()=>{\n        self.ctx.updateAliases();\n    });\n}\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min);\n}\n\nself.onDataUpdated = function() {\n    try {\n        if ($scope.dataKeyDetected) {\n            if (!$scope.isFocused) {\n                $scope.originalValue = self.ctx.data[0].data[0][1];\n                $scope.customerFormGroup.get('secretKey').patchValue($scope.originalValue);\n                self.ctx.detectChanges();\n            }\n        }\n    } catch (e) {\n        console.log(e);\n    }\n}\n\nself.typeParameters = function() {\n    return {\n        maxDatasources: 1,\n        maxDataKeys: 1,\n        singleEntity: true\n    }\n}\n\nself.onDestroy = function() {\n}\n",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Thresholds widget \",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":true,\"enableDataExport\":false,\"widgetStyle\":{},\"widgetCss\":\"\",\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
    },
    "bundleAlias" : "apana",
    "createdTime" : 1655816783491,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "f36f9d30-f162-11ec-8399-0d13b9a7c3cc"
    },
    "tenantId" : {
      "entityType" : "TENANT",
      "id" : "75d6a9b0-b3f3-11ec-88cb-ad8278896f52"
    }
  } ],
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}